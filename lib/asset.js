// Generated by CoffeeScript 1.4.0
(function() {
  var Asset, BSON, mongo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mongo = require('mongodb');

  BSON = mongo.BSONPure;

  Asset = {};

  Asset = (function() {

    function Asset(opts, db) {
      this.url = __bind(this.url, this);
      this.Asset = this;
      this.db = db;
      this.host = opts.asset_host;
      this.port = opts.asset_port;
      this.asset_servers = opts.asset_servers;
    }

    Asset.prototype.url = function(req, callback) {
      var asset_id, file_name, _ref,
        _this = this;
      _ref = [req.params.image_id, req.params.file_name], asset_id = _ref[0], file_name = _ref[1];
      return this._findAsset(asset_id, function(record) {
        var storage, url;
        if (!record) {
          return callback("http://google.com");
        }
        storage = _this.asset_servers[record["storage"]] || _this.asset_servers["cdn"];
        if (record["storage"] == null) {
          url = "http://" + storage['host'] + ":" + storage['port'] + "/uploads/asset/image/" + asset_id + "/" + file_name;
        } else {
          url = "http://" + storage['host'] + ":" + storage['port'] + "/uploads/" + asset_id + "/" + file_name;
        }
        callback(url);
        return _this._recordStat(asset_id, req);
      });
    };

    Asset.prototype._recordStat = function(asset_id, req) {
      var o_id,
        _this = this;
      console.log(req.connection.remoteAddress);
      console.log(req.headers.referer);
      o_id = new BSON.ObjectID(asset_id);
      return this.db.collection("assets", function(dbErr, collection) {
        var h;
        h = {};
        h["stat." + (req.headers.referer.replace(/[\.\?\:]/g, '-'))] = 1;
        return collection.update({
          _id: o_id
        }, {
          $inc: h
        }, {
          safe: true
        }, function(err) {
          return console.log(err);
        });
      });
    };

    Asset.prototype._findAsset = function(asset_id, callback) {
      var o_id,
        _this = this;
      o_id = new BSON.ObjectID(asset_id);
      return this.db.collection("assets", function(dbErr, collection) {
        return collection.find({
          _id: o_id
        }).nextObject(function(err, result) {
          if (err == null) {
            return callback(result);
          }
        });
      });
    };

    return Asset;

  })();

  exports.Asset = Asset;

}).call(this);
