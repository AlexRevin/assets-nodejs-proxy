mongo = require 'mongodb'
BSON = mongo.BSONPure

Asset = {}

class Asset
  constructor: (opts, db) ->
    @Asset = this
    @db = db
    @host = opts.asset_host
    @port = opts.asset_port
    @asset_servers = opts.asset_servers
    
  url: (req, callback) =>
    [asset_id, file_name] = [req.params.image_id, req.params.file_name]
    @_findAsset asset_id, (record) =>
      return callback("http://google.com") unless record
      storage = @asset_servers[record["storage"]] || @asset_servers["cdn"]
      unless record["storage"]?
        url = "http://#{storage['host']}:#{storage['port']}/uploads/asset/image/#{asset_id}/#{file_name}"
      else
        url = "http://#{storage['host']}:#{storage['port']}/uploads/#{asset_id}/#{file_name}"
      callback(url)
      @_recordStat(asset_id, req)
      
  _recordStat: (asset_id, req) ->
    console.log req.connection.remoteAddress
    console.log req.headers.referer
    
    o_id = new BSON.ObjectID asset_id
    @db.collection "assets", (dbErr, collection) => 
      h = {}
      h["stat.#{req.headers.referer.replace(/\.\?\:/g, '-')}"] = 1
      collection.update {_id: o_id}, {$inc: h}, {safe:true}, (err) -> 
       console.log err
    
    
  
  _findAsset: (asset_id, callback) ->
    o_id = new BSON.ObjectID asset_id
    @db.collection "assets", (dbErr, collection) => 
      collection.find({_id: o_id}).nextObject (err, result) =>
        callback(result) unless err?
          
exports.Asset = Asset